
EXTRA CREDIT

For the second extra credit assignment you will develop a basic image processing application. You will exercise pointers, classes, inheritance, namespaces, file input-output, and more.

---

THE IMAGE CLASS

You will work with grayscale images (2D array of pixels, each in [0, 255]).

Example Image class:

class Image {
public:
    Image();
    Image(unsigned int w, unsigned int h);
    Image(const Image &other);
    ~Image();

    bool load(std::string imagePath);
    bool save(std::string imagePath);

    Image& operator=(const Image &other);
    Image operator+(const Image &i);
    Image operator-(const Image &i);

    bool getROI(Image &roiImg, Rectangle roiRect);
    bool getROI(Image &roiImg, unsigned int x, unsigned int y, unsigned int width, unsigned int height);

    bool isEmpty() const;
    Size size() const;
    unsigned int width() const;
    unsigned int height() const;

    unsigned char& at(unsigned int x, unsigned int y);
    unsigned char& at(Point pt);

    unsigned char* row(int y);
    void release();

    friend std::ostream& operator<<(std::ostream& os, const Image& dt);

    static Image zeros(unsigned int width, unsigned int height);
    static Image ones(unsigned int width, unsigned int height);

private:
    unsigned char** m_data;
    unsigned int m_width;
    unsigned int m_height;
};

Requirements:
- Copy constructor and assignment operator
- width(), height(), size() returning a Size object
- Load/save from .pgm file (Netpbm format)
- operator<< to display pixels
- +, -, * with images and scalars
- at(x, y) and at(Point)
- ROI with pointer arithmetic
- zeros() and ones() static methods

---

IMAGE PROCESSING TASKS

Create a base class:

class ImageProcessing {
public:
    virtual void process(const Image& src, Image& dst) = 0;
};

1. Brightness and contrast:
    F(x, y) = α * I(x, y) + β
    - Clip to [0, 255]
    - α controls contrast, β brightness

2. Gamma correction:
    F(x, y) = I(x, y)^γ
    - γ < 1 darkens, γ > 1 brightens

3. Convolution:
    F = K * I
    Apply a kernel K over image I.

Examples of kernels:
- Identity: no effect
- Mean blur: all 1s, scale by 1/9
- Gaussian blur: weights center more
- Sobel kernels: detect edges (horizontal/vertical)

Use pointer to scaling function in constructor.

---

DRAWING MODULE

Implement classes:

Point
- int x, y
- Constructors, <<, >>

Rectangle
- int x, y, width, height
- Constructors, <<, >>
- +, -, & (intersection), | (union)

Drawing functions:
- drawCircle(Image&, Point, int radius, unsigned char color)
- drawLine(Image&, Point p1, Point p2, unsigned char color)
- drawRectangle(Image&, Rectangle, unsigned char color)
- drawRectangle(Image&, Point tl, Point br, unsigned char color)

---

REQUIREMENTS

- Consistent coding style
- ≥ 80% test coverage
- No memory leaks
- Doxygen-formatted documentation
- Clip pixel values to [0, 255]
- For bonus: support color images (.ppm)

---

APPENDIX

Example results:
- Brightness/contrast adjustment with β = ±30, ±70, α = 0.5, 2
- Convolution with mean blur, Gaussian blur
- Sobel edge detection (horizontal/vertical)

Sample images:
https://people.sc.fsu.edu/~jburkardt/data/pgma/
